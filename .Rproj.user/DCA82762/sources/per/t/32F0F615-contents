#
# This is the server logic of a Shiny web application. You can run the 
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
# 
#    http://shiny.rstudio.com/
#

library(shiny)
library(metafor)
library(DT)

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
 
  dataC <- reactive({input$dataChoice})
  
       output$dataChoiceUI <-  renderUI({
         
         if(dataC() == "1"){
           
         #Selection of a given Dataset
                     selectInput("dataSelect", label = h3("Select a Dataset"),
                     choices = as.list(data(package='metafor')$results[,3]),
                     selected = 1)
           
         } else if (dataC() == "2"){
           div(
           # Input: Select a file ----
           fileInput("file1", "Choose CSV File",
                     multiple = FALSE,
                     accept = c("text/csv",
                                "text/comma-separated-values,text/plain",
                                ".csv")),
           
           # Input: Checkbox if file has header ----
           checkboxInput("header", "Header", TRUE),

           # Input: Select separator ----
            radioButtons("sep", "Separator",
                         choices = c(Comma = ",",
                                     Semicolon = ";",
                                     Tab = "\t"),
                         selected = ","),

           # Input: Select quotes ----
            radioButtons("quote", "Quote",
                         choices = c(None = "",
                                     "Double Quote" = '"',
                                     "Single Quote" = "'"),
                         selected = '"')

           
           
          )
           
         } else if (dataC() == "3"){
           
           selectInput("dataSelect", label = h3("Select a Dataset"),
                       choices = list("mtcars" = "mtcars"),
                       selected = 1)
         }
         
         # output$dataUpload <- reactive({
         #   input$refresh
         #   isolate({read.csv(input$file1$datapath,
         #                     header = input$header,
         #                     sep = input$sep,
         #                     quote = input$quote)
         #   })
         # })
         # observeEvent(input$refresh, once = T, {
         #   dataUpload <- read.csv(input$file1$datapath,
         #                                 header = input$header,
         #                                 sep = input$sep,
         #                                 quote = input$quote)
         # })
         
    })
       
       dta <- reactive({
         input$refresh 
         isolate({
           if(dataC() == "1"){ 
             get(input$dataSelect)
           } else if (dataC() == "2"){
             read.csv(input$file1$datapath,
                            header = input$header,
                            sep = input$sep,
                            quote = input$quote)
           } else if (dataC() == "3"){
             get(input$dataSelect)
           } else {
             get(metafor::dat.bangertdrowns2004)
           }
         })
       })
       
        
       
           # output$dataUI <- renderUI({
           #   if (input$refresh == 0)
           #     return()
           #   output$dataTable <- renderTable(dta()) Â°
           #   fluidRow(tableOutput("dataTable"))
           # })
           
           
        output$dataUI <- DT::renderDataTable({ dta() })
        
        observeEvent(input$refresh, {
          showNotification("Data was updated!", type = "error", duration = 8)
        })

})


