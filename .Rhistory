?renderUI
library(metafor)
data(metafor)
data(package='metafor')
names(data(package='metafor'))
test1 <- data(package='metafor')
test1$results
test1$header
test1 <- test1$results
test1[,2]
test1[,3]
test <- test1[,3]
as.list(test)
data(package='metafor')$results[,3]
as.list(data(package='metafor')$results[,3])
list(data(package='metafor')$results[,3])
shiny::runApp('ShinyMeta')
?hr
?shinyServer
?selectInput
?dataTableOutput
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?fluidRow
?shinyUI
View(dat.bangertdrowns2004)
load(dat.bangertdrowns2004)
name(dat.bangertdrowns2004)
dataTableOutput(dat.bangertdrowns2004)
runApp('ShinyMeta')
data("dat.bangertdrowns2004")
input$selectData
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?selectInput
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
data$Table <- data("dat.bangertdrowns2004")
dataTable <- data("dat.bangertdrowns2004")
dataTable <- data(dat.bangertdrowns2004)
dataTable
dataTable <- data(dat.bangertdrowns2004)
library(metafor)
dataTable <- load(dat.bangertdrowns2004)
dataTable <- dat.bangertdrowns2004
View(dataTable)
dataTable <- as.data.frame(dat.bangertdrowns2004)
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?observeEvent
runApp('ShinyMeta')
data.frame(input$dataSelect)
data.frame(metafor::dat.bangertdrowns2004)
{input$dataSelect}
runApp('ShinyMeta')
runApp('ShinyMeta')
data.frame("dat.bangertdrowns2004")
data.frame(as.character("dat.bangertdrowns2004"))
data.frame("dat.bangertdrowns2004")
data.frame("dat.bangertdrowns2004")$
data.frame("dat.bangertdrowns2004")$
data.frame("dat.bangertdrowns2004")
?selectInput
runApp('ShinyMeta')
runApp('ShinyMeta')
c("dat.")
as.list(data(package='metafor')$results[,3])
data(package='metafor')$results[,3]
runApp('ShinyMeta')
unlist(data(package='metafor')$results[,3])
test1 <- unlist(data(package='metafor')$results[,3])
test1[2]
cbind(test1[1])
cbind(test1[1], test1[2])
c(test1[1], test1[2])
c(test1[1], test1[2])[2]
unlist(test1[1])
factor(test1[1])
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
paste(metafor:: , "test")
paste0(metafor:: , "test")
paste0(metafor:: "test")
paste0("metafor::" "test")
paste0("metafor::", "test")
eval(test1[1])
View(eval(test1[1]))
View(eval(parse = test1[1]))
eval(parse(text = test1[1]))
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
eval(parse(text = test1[1]))
test1[1]
dat.bangertdrowns2004
mtcars
get(test1[1])
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
describe
?describe
?get
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
interactive()
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?switch
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('test')
runApp('ShinyMeta')
runApp('ShinyMeta')
c(1)
c("1")
c("1") == "1"
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?reactiveVal
runApp('ShinyMeta')
get("mtcars")
kronecker(4,5)
kronecker(c(1:4),c(1:5))
?kronecker
matrix(c(1:4),c(1:5))
matrix(c(1:4):c(1:5))
matrix(c(1:4);c(1:5))
matrix(c(1:4),c(1:5))
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
list("mtcars" = 1)
list("mtcars" = "mtcars")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
ones
?ones
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?reactive
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
install.packages("shinydasboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp('ShinyMeta')
?req
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
stats()
?observe
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?div
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?observeEvent
cat("Showing", input$x, "rows\n")
cat("Showing", 5, "rows\n"
)
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?forest
?rma
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?dat.bangertdrowns2004
?dat.bangertdrowns2004$Descrjt
?dat.bangertdrowns2004$Description
dat.bangertdrowns2004$Description
str(dat.bangertdrowns2004)
help("dat.bangertdrowns2004")
test2 <- help("dat.bangertdrowns2004")
test2
extract_help("dat.bangertdrowns2004")
extract_help <- function(pkg, fn = NULL, to = c("txt", "html", "latex", "ex"))
{
to <- match.arg(to)
rdbfile <- file.path(find.package(pkg), "help", pkg)
rdb <- tools:::fetchRdDB(rdbfile, key = fn)
convertor <- switch(to,
txt   = tools::Rd2txt,
html  = tools::Rd2HTML,
latex = tools::Rd2latex,
ex    = tools::Rd2ex
)
f <- function(x) capture.output(convertor(x))
if(is.null(fn)) lapply(rdb, f) else f(rdb)
}
extract_help("dat.bangertdrowns2004")
extract_help("metafor")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?box
runApp('ShinyMeta')
runApp('ShinyMeta')
install.packages("shinydashboard")
shiny::runApp('ShinyMeta')
install.packages("metafor")
runApp('ShinyMeta')
shiny::runApp('ShinyMeta')
?box
## Only run this example in interactive R sessions
if (interactive()) {
library(shiny)
# A dashboard body with a row of infoBoxes and valueBoxes, and two rows of boxes
body <- dashboardBody(
# infoBoxes
fluidRow(
infoBox(
"Orders", uiOutput("orderNum2"), "Subtitle", icon = icon("credit-card")
),
infoBox(
"Approval Rating", "60%", icon = icon("line-chart"), color = "green",
fill = TRUE
),
infoBox(
"Progress", uiOutput("progress2"), icon = icon("users"), color = "purple"
)
),
# valueBoxes
fluidRow(
valueBox(
uiOutput("orderNum"), "New Orders", icon = icon("credit-card"),
href = "http://google.com"
),
valueBox(
tagList("60", tags$sup(style="font-size: 20px", "%")),
"Approval Rating", icon = icon("line-chart"), color = "green"
),
valueBox(
htmlOutput("progress"), "Progress", icon = icon("users"), color = "purple"
)
),
# Boxes
fluidRow(
box(status = "primary",
sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
selectInput("progress", "Progress",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80,
"100%" = 100)
)
),
box(title = "Histogram box title",
status = "warning", solidHeader = TRUE, collapsible = TRUE,
plotOutput("plot", height = 250)
)
),
# Boxes with solid color, using `background`
fluidRow(
# Box with textOutput
box(
title = "Status summary",
background = "green",
width = 4,
textOutput("status")
),
# Box with HTML output, when finer control over appearance is needed
box(
title = "Status summary 2",
width = 4,
background = "red",
uiOutput("status2")
),
box(
width = 4,
background = "light-blue",
p("This is content. The background color is set to light-blue")
)
)
)
server <- function(input, output) {
output$orderNum <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$orderNum2 <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$progress <- renderUI({
tagList(input$progress, tags$sup(style="font-size: 20px", "%"))
})
output$progress2 <- renderUI({
paste0(input$progress, "%")
})
output$status <- renderText({
paste0("There are ", input$orders,
" orders, and so the current progress is ", input$progress, "%.")
})
output$status2 <- renderUI({
iconName <- switch(input$progress,
"100" = "ok",
"0" = "remove",
"road"
)
p("Current status is: ", icon(iconName, lib = "glyphicon"))
})
output$plot <- renderPlot({
hist(rnorm(input$orders))
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
}
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?DT
install.packages("DT
")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?read.csv
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
install.packages("DT")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?get
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?withProgress
runApp('ShinyMeta')
?showNotification
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?paste
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?showNotification
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
